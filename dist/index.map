{"version":3,"sources":["tester.js","index.js"],"names":["Tester","NullComponent","props","getInstance","component","instance","wrappedInstance","sleep","ms","Promise","resolve","setTimeout","capitalize","string","charAt","toUpperCase","slice","constructor","TestedComponent","opts","initialMount","mount","onBeforeMount","profile","profiles","Default","hookName","Object","keys","hooks","onInit","wrapper","find","debug","console","log","html","text","selector","update","refresh","createShallowWrapper","shallow","AppState","mountOpts","wrappers","WrapperTree","reduce","Tree","wrapperChildren","renderChildren","async","registerProfile","name","capitalizedName","Error","registerHook","hook","forEach","profileKey"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { mount } from 'enzyme';\n\nconst NullComponent = (props) => <Fragment {...props} />;\n\nfunction getInstance (component) {\n  const instance = component.instance();\n  return instance.wrappedInstance || instance;\n}\n\nfunction sleep (ms = 0) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction capitalize (string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/*\n  Name: Tester\n  Description: Testing utility class to mount a specific component with it's required wrappers.\n\n  Usage:\n    // Bootstrap Transport, localStorage + Session and an AppState.\n    const tester = new Tester(MyComponent);\n\n    // Bootstrap nothing, use with light components that doesn't need any of the above.\n    const tester = new TesterLight(MyComponent);\n\n    // Mount the component\n    await tester.mount();\n\n    // Test component that requires more JSX than the component only :\n    const new Tester(MyComponent, {mount: (<Form><MyComponent></Form>)});\n\n    // You can mount right away if no Transport or AppState modification is needed.\n    const tester = await new Tester(MyComponent).mount();\n\n    // opts.shallow is an experimental feature that allows you to test the TestedComponent instance behaviors.\n    // Please only use it when necessary.\n    const tester = await new Tester(MyComponent, { shallow: true }).mount();\n      tester.shallow.wrapper // equals to shallow(<TestedComponent {...this.props} {...this.AppState} />)\n      tester.shallow.instance // equals to tester.shallow.instance()\n*/\n\n/**\n * Testing utility class to mount a specific component with it's required wrappers.\n *\n * @param {ReactComponent} TestedComponent\n * @param {Object} options\n * @returns {Tester}\n */\nclass Tester {\n  initialMount;\n  onBeforeMount;\n  opts;\n  profile;\n  props;\n  shallow;\n  TestedComponent;\n  wrapper;\n\n  constructor (TestedComponent, opts = {}) {\n    this.opts = opts;\n    this.initialMount = opts.mount;\n    this.onBeforeMount = opts.onBeforeMount;\n    this.profile = {...this.constructor.profiles.Default, ...opts.profile};\n    this.props = opts.props || {};\n    this.TestedComponent = TestedComponent;\n\n    // Allow testing without a main TestedComponent. This require an initialMount.\n    if (!this.TestedComponent && this.initialMount) {\n      this.TestedComponent = NullComponent;\n      this.initialMount = <this.TestedComponent>{this.initialMount}</this.TestedComponent>;\n    }\n\n    // Loop through hooks onInit(),\n    //for (const hookName of Object.keys(this.profile)) {\n    for (const hookName of Object.keys(this.constructor.hooks)) {\n      if (this.profile[hookName] && this.constructor.hooks[hookName] && typeof this.constructor.hooks[hookName].onInit === 'function') {\n        this.constructor.hooks[hookName].onInit(this, opts);\n      }\n    }\n  }\n\n  get instance () {\n    return getInstance(this.component);\n  }\n\n  get component () {\n    return this.wrapper.find(this.TestedComponent);\n  }\n\n  debug () {\n    // eslint-disable-next-line no-console\n    console.log(this.wrapper.debug());\n  }\n\n  html () {\n    return this.component.html();\n  }\n\n  text () {\n    return this.component.text();\n  }\n\n  find (selector) {\n    return this.wrapper.find(selector);\n  }\n\n  update () {\n    return this.wrapper.update();\n  }\n\n  async sleep (ms) {\n    await sleep(ms);\n  }\n\n  async refresh (ms) {\n    await sleep(ms);\n    this.update();\n  }\n\n  createShallowWrapper () {\n    this.shallow = {};\n    this.shallow.wrapper = mount(<this.TestedComponent.wrappedComponent {...this.props} { ...this.AppState } />);\n    this.shallow.instance = getInstance(this.shallow.wrapper);\n  }\n\n  async mount (mountOpts = {}) {\n\n    // Loop through hooks onBeforeMount(),\n    for (const hookName of Object.keys(this.profile)) {\n      if (this.profile[hookName] && this.constructor.hooks[hookName] && typeof this.constructor.hooks[hookName].onBeforeMount === 'function') {\n        await this.constructor.hooks[hookName].onBeforeMount(this, mountOpts);\n      }\n    }\n\n    // Allows you to fetch data to set as props, prepare extra stores, etc.\n    if (this.onBeforeMount) {\n      await this.onBeforeMount(this);\n    }\n\n    const wrappers = [\n      /*\n      {\n          Component: Provider,\n          name: 'Provider',\n          props: this.AppState,\n        },\n      */\n      ]\n      , initialMount = this.initialMount || <this.TestedComponent {...this.props} />;\n\n    const WrapperTree = wrappers.reduce((Tree, wrapper) => {\n      const wrapperChildren = wrapper.renderChildren !== false && Tree;\n      if (wrapper.props) {\n        return <wrapper.Component {...wrapper.props}>{wrapperChildren}</wrapper.Component>;\n      }\n      return Tree;\n    }, initialMount);\n\n    this.wrapper = await mount(WrapperTree);\n\n    if (this.opts.shallow) {\n      this.createShallowWrapper();\n    }\n\n    if (mountOpts.async) {\n      await this.sleep();\n      this.update();\n    }\n\n    return this;\n  }\n}\n\n/*\n  Profiles,\n  {\n    // Profile keys must be hook names.\n  }\n*/\nTester.profiles = {\n  // Default profile, each of it's properties can be overwritten.\n  Default: {},\n};\nTester.registerProfile = (name, profile) => {\n  const capitalizedName = capitalize(name);\n  if (Tester.profiles[capitalizedName] && capitalizedName !== 'Default') {\n    throw new Error(`Tester.registerProfile() : A profile named \"${capitalizedName}\" already exist.`);\n  }\n\n  Tester.profiles[capitalizedName] = profile;\n};\n\n/*\n  Hooks,\n  {\n    name: string,\n    component: React.Component,\n    props: object || fn(), // fn() allows this.AppState to be set for e.g\n    onInit: fn(),\n    onBeforeMount: fn(),\n    shortCuts: {shortCutName: fn()},\n  }\n\n  Note: Order is important!\n*/\nTester.hooks = {};\nTester.registerHook = (hook) => {\n  if (!hook.name) { throw new Error('Tester.registerHook() : A hooks must have a name.'); }\n  if (Tester.hooks[hook.name]) { throw new Error(`Tester.registerHook() : A hook named \"${hook.name}\" already exist.`); }\n\n  Tester.hooks[hook.name] = hook;\n};\n\n/*\n  Create shortcuts for each global profiles\n  Tester shortcuts allows you to use a specific global profile without having to pass it in in the options.\n\n  E.g.\n  Using a new Tester.Light(MyComponent) allows you to skip the initialization of Transport, localStorage + Session and AppState.\n*/\nObject.keys(Tester.profiles).forEach((profileKey) => {\n  Tester[profileKey] = function (TestedComponent, opts = {}) {\n    return new Tester(TestedComponent, {...opts, profile: Tester.profiles[profileKey]});\n  };\n});\n\nexport default Tester;\n","export { default as Tester } from './tester';\n"]}