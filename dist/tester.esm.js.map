{"version":3,"file":"tester.esm.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/utils.ts","../src/tester.tsx","../src/ConfigurationClass.ts","../src/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","/*\n  Utilities\n*/\n\nexport function getInstance(component: any) {\n  const instance = component.instance();\n  return instance && (instance.wrappedInstance || instance);\n}\n\nexport function getValue(tester: any, value: unknown) {\n  return typeof value === 'function' ? value(tester) : value;\n}\n\nexport async function sleep(ms: number = 0) {\n  return new Promise<void>(resolve => setTimeout(resolve, ms));\n}\n\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport async function flushPromises() {\n  return new Promise<void>((resolve, _reject) => setImmediate(resolve));\n}\n","import React, { Fragment, ComponentType } from 'react';\n\nimport { flushPromises, getInstance, getValue, isString, sleep } from './utils';\nimport ConfigurationClass from './ConfigurationClass';\nimport { IHook, ITesterOpts, IWrapper, IOnInit, IOnBeforeMount } from './interfaces';\n\ntype ISelectArg = string | { simulate: (event: string) => void };\n\nconst NullComponent: React.FC<any> = (props: any) => <Fragment {...props} />;\n\n/*\n  Name: Tester\n  Description: Testing utility class to mount a specific component with it's required wrappers.\n\n  Usage:\n    // Bootstrap Transport, localStorage + Session and an AppState.\n    const tester = new Tester(MyComponent);\n\n    // Bootstrap nothing, use with light components that doesn't need any of the above.\n    const tester = new TesterLight(MyComponent);\n\n    // Mount the component\n    await tester.mount();\n\n    // Test component that requires more JSX than the component only :\n    const new Tester(MyComponent, {mount: (<Form><MyComponent></Form>)});\n\n    // You can mount right away if no Transport or AppState modification is needed.\n    const tester = await new Tester(MyComponent).mount();\n*/\n\n/**\n * Testing utility class to mount a specific component with it's required wrappers.\n */\nclass Tester {\n  public static Configuration: ConfigurationClass;\n\n  public opts: ITesterOpts;\n\n  public config: ConfigurationClass;\n  public initialMount: React.ReactNode;\n  public onBeforeMount?: (tester: Tester) => Promise<void>;\n  public props: object;\n  public TestedComponent: ComponentType;\n\n  public wrapper: any;\n\n  public constructor(TestedComponent: ComponentType, opts: ITesterOpts = {}) {\n    this.config = Tester.Configuration;\n    this.initialMount = opts.mount;\n    this.onBeforeMount = opts.onBeforeMount;\n    this.opts = opts;\n    this.props = opts.props || {};\n    this.TestedComponent = TestedComponent;\n\n    // Allow testing without a main TestedComponent. This require an initialMount.\n    if (!this.TestedComponent && this.initialMount) {\n      this.TestedComponent = NullComponent;\n      this.initialMount = <this.TestedComponent>{this.initialMount}</this.TestedComponent>;\n    }\n\n    // Loop through hooks onInit(),\n    const validHooks = this.config.getValidHooks('onInit') as Array<IHook & { onInit: IOnInit }>;\n    validHooks.forEach(hook => hook.onInit(this));\n  }\n\n  public getWrappers(): IWrapper[] {\n    const wrappers: IWrapper[] = [];\n\n    this.config.getValidHooks('component').forEach((hook: IHook) => {\n      wrappers.push({\n        component: hook.component,\n        name: hook.name,\n        props: getValue(this, hook.props),\n      });\n    });\n\n    return wrappers;\n  }\n\n  public get instance() {\n    return getInstance(this.component);\n  }\n\n  public get component() {\n    return this.wrapper.find(this.TestedComponent);\n  }\n\n  public debug() {\n    // tslint:disable-next-line:no-console\n    console.log(this.wrapper.debug());\n  }\n\n  public html() {\n    return this.component.html();\n  }\n\n  public text() {\n    return this.component.text();\n  }\n\n  public find(selector: string | ComponentType) {\n    return this.wrapper.find(selector);\n  }\n\n  public update() {\n    return this.wrapper.update();\n  }\n\n  public async sleep(ms?: number) {\n    await sleep(ms);\n  }\n\n  public async refresh(ms?: number) {\n    await sleep(ms);\n    this.update();\n  }\n\n  private getComponent(selector: ISelectArg) {\n    return isString(selector) ? this.find(selector).first() : selector;\n  }\n\n  public changeInput(selector: ISelectArg, value: string) {\n    const component = this.getComponent(selector);\n    component.simulate('focus');\n    component.simulate('change', { target: { value } });\n    component.simulate('blur');\n  }\n\n  public checkBox(selector: ISelectArg, checked = true) {\n    const component = this.getComponent(selector);\n    component.simulate('change', { target: { checked } });\n  }\n\n  public click(selector: ISelectArg) {\n    const component = this.getComponent(selector);\n    component.simulate('click');\n  }\n\n  public async submit(selector: ISelectArg = 'form') {\n    const component = this.getComponent(selector);\n    component.simulate('submit');\n    await this.refresh();\n  }\n\n  public async mount(mountOpts: { async?: boolean } = {}) {\n    // Loop through hooks onBeforeMount(),\n    // This MUST be a regular for () loop to not throw the promise away. (forEach won't work)\n    type IValidHook = IHook & { onBeforeMount: IOnBeforeMount };\n    const validHooks = this.config.getValidHooks('onBeforeMount') as IValidHook[];\n    for (const hook of validHooks) {\n      await hook.onBeforeMount(this, mountOpts);\n    }\n\n    // Allows you to fetch data to set as props, prepare extra stores, etc.\n    if (this.onBeforeMount) {\n      await this.onBeforeMount(this);\n    }\n\n    const initialMount = this.initialMount || <this.TestedComponent {...this.props} />;\n\n    const WrapperTree = this.getWrappers().reduce<any>((Tree, wrapper) => {\n      const wrapperChildren = wrapper.renderChildren !== false && Tree;\n      if (wrapper.props) {\n        return <wrapper.component {...wrapper.props}>{wrapperChildren}</wrapper.component>;\n      }\n      return Tree;\n    }, initialMount);\n\n    this.wrapper = await this.config.enzyme.mount(WrapperTree);\n\n    if (mountOpts.async !== false) {\n      if (this.instance) {\n        await this.instance.componentDidMount();\n      }\n\n      // See https://github.com/enzymejs/enzyme/issues/1587\n      await flushPromises();\n      await this.refresh();\n    }\n\n    return this;\n  }\n}\n\nexport default Tester;\n","import { IConfig, IHook, ITesterClass } from './interfaces';\n\n/*\n  Tester Configuration Class\n*/\nclass ConfigurationClass {\n  public enzyme: any;\n  public hooks: { [key: string]: IHook } = {};\n  public Tester: ITesterClass;\n\n  public constructor(argTester: ITesterClass) {\n    this.Tester = argTester;\n    argTester.Configuration = this;\n  }\n\n  public configure(enzyme: any, config: IConfig) {\n    this.enzyme = enzyme;\n\n    if (config.hooks) {\n      config.hooks.forEach((hook: IHook) => {\n        this.registerHook(hook);\n      });\n    }\n\n    return this.Tester;\n  }\n\n  /*\n    Hooks,\n    {\n      name: string,\n      component: React.Component,\n      props: object || fn(), // fn() allows this.AppState to be set for e.g\n      onInit: fn(),\n      onBeforeMount: fn(),\n      shortCuts: {shortCutName: fn()},\n      wrapper: fn() => { Component: React.Component, name: string, props: object }\n    }\n\n    Note: Order is important!\n  */\n  public registerHook(hook: IHook) {\n    if (!hook.name) {\n      throw new Error('Tester.registerHook() : A hooks must have a name.');\n    }\n    if (this.hooks[hook.name]) {\n      throw new Error(`Tester.registerHook() : A hook named \"${hook.name}\" already exist.`);\n    }\n\n    // Validate hook properties here.\n\n    this.hooks[hook.name] = hook;\n  }\n\n  public getValidHooks(hookProp: string): IHook[] {\n    const hooks: IHook[] = [];\n\n    Object.values(this.hooks).forEach(hook => {\n      let valid = true;\n      if (hookProp && !hook[hookProp]) {\n        valid = false;\n      }\n\n      if (valid) {\n        hooks.push(hook);\n      }\n    });\n\n    return hooks;\n  }\n}\n\nexport default ConfigurationClass;\n","import Tester from './tester';\nimport ConfigurationClass from './ConfigurationClass';\n\nconst TesterConfig = new ConfigurationClass(Tester);\n\nexport { Tester, TesterConfig };\n"],"names":["flushPromises","Promise","resolve","_reject","setImmediate","sleep","ms","setTimeout","getInstance","component","instance","wrappedInstance","getValue","tester","value","isString","String","NullComponent","props","React","Fragment","Tester","TestedComponent","opts","config","Configuration","initialMount","mount","onBeforeMount","validHooks","getValidHooks","forEach","hook","onInit","getWrappers","wrappers","push","name","debug","console","log","wrapper","html","text","find","selector","update","refresh","getComponent","first","changeInput","simulate","target","checkBox","checked","click","submit","mountOpts","WrapperTree","reduce","Tree","wrapperChildren","renderChildren","enzyme","async","componentDidMount","ConfigurationClass","argTester","configure","hooks","registerHook","Error","hookProp","Object","values","valid","TesterConfig"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACO,MAAM,KAAK,gBAAgB,CAAC,WAAW;AAC9C,CAAC,SAAS,KAAK,GAAG,EAAE;AACpB,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,WAAW,EAAE,UAAU,EAAE;AAC1D,EAAE,MAAM,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;AAC7B,EAAE,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;AACvB,EAAE,IAAI,KAAK,EAAE;AACb,GAAG,MAAM,QAAQ,GAAG,KAAK,GAAG,CAAC,GAAG,WAAW,GAAG,UAAU,CAAC;AACzD,GAAG,IAAI,QAAQ,EAAE;AACjB,IAAI,IAAI;AACR,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,KAAK,CAAC,OAAO,CAAC,EAAE;AAChB,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3B,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB,IAAI,MAAM;AACV,IAAI,OAAO,IAAI,CAAC;AAChB,IAAI;AACJ,GAAG;AACH,EAAE,IAAI,CAAC,CAAC,GAAG,SAAS,KAAK,EAAE;AAC3B,GAAG,IAAI;AACP,IAAI,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;AAC1B,IAAI,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;AACrB,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;AAClE,KAAK,MAAM,IAAI,UAAU,EAAE;AAC3B,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC3C,KAAK,MAAM;AACX,KAAK,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AAC/B,KAAK;AACL,IAAI,CAAC,OAAO,CAAC,EAAE;AACf,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1B,IAAI;AACJ,GAAG,CAAC;AACJ,EAAE,OAAO,MAAM,CAAC;AAChB,GAAE;AACF,CAAC,OAAO,KAAK,CAAC;AACd,CAAC,GAAG,CAAC;AACL;AACA;AACO,SAAS,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;AAC5C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;AACd,EAAE,IAAI,KAAK,YAAY,KAAK,EAAE;AAC9B,GAAG,IAAI,KAAK,CAAC,CAAC,EAAE;AAChB,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE;AACnB,KAAK,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;AACrB,KAAK;AACL,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;AACpB,IAAI,MAAM;AACV,IAAI,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC9C,IAAI,OAAO;AACX,IAAI;AACJ,GAAG;AACH,EAAE,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE;AAC3B,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5E,GAAG,OAAO;AACV,GAAG;AACH,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;AACjB,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;AACjB,EAAE,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;AAC1B,EAAE,IAAI,QAAQ,EAAE;AAChB,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;AAClB,GAAG;AACH,EAAE;AACF,CAAC;AACD;AACO,SAAS,cAAc,CAAC,QAAQ,EAAE;AACzC,CAAC,OAAO,QAAQ,YAAY,KAAK,IAAI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;AACpD,CAAC;AA6CD;AACA;AACO,SAAS,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;AAC3C,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC;AAC1B,CAAC,SAAS,MAAM,CAAC,MAAM,EAAE;AACzB,EAAE,IAAI;AACN,GAAG,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE;AACtD,IAAI,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACrB,IAAI,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;AAC/B,KAAK,IAAI,cAAc,CAAC,MAAM,CAAC,EAAE;AACjC,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;AACxB,MAAM,MAAM;AACZ,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,KAAK,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1F,MAAM,OAAO;AACb,MAAM;AACN,KAAK;AACL,IAAI;AACJ,GAAG,IAAI,IAAI,EAAE;AACb,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AAC7B,IAAI,MAAM;AACV,IAAI,IAAI,GAAG,MAAM,CAAC;AAClB,IAAI;AACJ,GAAG,CAAC,OAAO,CAAC,EAAE;AACd,GAAG,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/C,GAAG;AACH,EAAE;AACF,CAAC,MAAM,EAAE,CAAC;AACV,CAAC,OAAO,IAAI,CAAC;AACb,CAAC;AAuBD;AACO,MAAM,eAAe,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,YAAY,CAAC;AAC/J;AACA;AACA;AACO,SAAS,MAAM,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE;AAC5C,CAAC,IAAI,OAAO,MAAM,CAAC,eAAe,CAAC,KAAK,UAAU,EAAE;AACpD,EAAE,IAAI,QAAQ,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC;AAC/D,EAAE,SAAS,MAAM,CAAC,MAAM,EAAE;AAC1B,GAAG,IAAI;AACP,IAAI,OAAO,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE;AACnE,KAAK,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/B,KAAK,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;AAChC,MAAM,IAAI,cAAc,CAAC,MAAM,CAAC,EAAE;AAClC,OAAO,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;AACzB,OAAO,MAAM;AACb,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,KAAK,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3F,OAAO,OAAO;AACd,OAAO;AACP,MAAM;AACN,KAAK;AACL,IAAI,IAAI,IAAI,EAAE;AACd,KAAK,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;AAC9B,KAAK,MAAM;AACX,KAAK,IAAI,GAAG,MAAM,CAAC;AACnB,KAAK;AACL,IAAI,CAAC,OAAO,CAAC,EAAE;AACf,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,IAAI;AACJ,GAAG;AACH,EAAE,MAAM,EAAE,CAAC;AACX,EAAE,IAAI,QAAQ,CAAC,MAAM,EAAE;AACvB,GAAG,IAAI,MAAM,GAAG,SAAS,KAAK,EAAE;AAChC,IAAI,IAAI;AACR,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACrB,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAC;AACxB,MAAM;AACN,KAAK,CAAC,MAAM,CAAC,EAAE;AACf,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,KAAI;AACJ,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;AAC1B,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE;AACzC,KAAK,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC;AACrB,KAAK,CAAC,CAAC;AACP,IAAI;AACJ,GAAG,MAAM,EAAE,CAAC;AACZ,GAAG;AACH,EAAE,OAAO,IAAI,CAAC;AACd,EAAE;AACF;AACA,CAAC,IAAI,EAAE,QAAQ,IAAI,MAAM,CAAC,EAAE;AAC5B,EAAE,MAAM,IAAI,SAAS,CAAC,wBAAwB,CAAC,CAAC;AAChD,EAAE;AACF;AACA,CAAC,IAAI,MAAM,GAAG,EAAE,CAAC;AACjB,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACzC,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,EAAE;AACF,CAAC,OAAO,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;AACvE,CAAC;AACD;AACO,MAAM,oBAAoB,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,aAAa,KAAK,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC,IAAI,iBAAiB;;IC5MjKA,aAAtB,YAAsBA,aAAtB;AAAA;AACE,2BAAO,IAAIC,OAAJ,CAAkB,UAACC,OAAD,EAAUC,OAAV;AAAA,aAAsBC,YAAY,CAACF,OAAD,CAAlC;AAAA,KAAlB,CAAP;AACD,GAFD;AAAA;AAAA;AAAA;AARA,IAAsBG,KAAtB,YAAsBA,KAAtB,CAA4BC,EAA5B;AAAA,MAA4BA,EAA5B;AAA4BA,IAAAA,EAA5B,GAAyC,CAAzC;AAAA;;AAAA;AACE,2BAAO,IAAIL,OAAJ,CAAkB,UAAAC,OAAO;AAAA,aAAIK,UAAU,CAACL,OAAD,EAAUI,EAAV,CAAd;AAAA,KAAzB,CAAP;AACD,GAFD;AAAA;AAAA;AAAA;;AAbA;;;AAIA,SAAgBE,YAAYC;AAC1B,MAAMC,QAAQ,GAAGD,SAAS,CAACC,QAAV,EAAjB;AACA,SAAOA,QAAQ,KAAKA,QAAQ,CAACC,eAAT,IAA4BD,QAAjC,CAAf;AACD;AAED,SAAgBE,SAASC,QAAaC;AACpC,SAAO,OAAOA,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACD,MAAD,CAAnC,GAA8CC,KAArD;AACD;AAMD,SAAgBC,SAASD;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAArD;AACD;;ACXD,IAAMC,aAAa,GAAkB,SAA/BA,aAA+B,CAACC,KAAD;AAAA,SAAgBC,mBAAA,CAACC,QAAD,oBAAcF,MAAd,CAAhB;AAAA,CAArC;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;IAGMG;AAaJ,kBAAmBC,eAAnB,EAAmDC,IAAnD;;;QAAmDA;AAAAA,MAAAA,OAAoB;;;AACrE,SAAKC,MAAL,GAAcH,MAAM,CAACI,aAArB;AACA,SAAKC,YAAL,GAAoBH,IAAI,CAACI,KAAzB;AACA,SAAKC,aAAL,GAAqBL,IAAI,CAACK,aAA1B;AACA,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKL,KAAL,GAAaK,IAAI,CAACL,KAAL,IAAc,EAA3B;AACA,SAAKI,eAAL,GAAuBA,eAAvB;;AAGA,QAAI,CAAC,KAAKA,eAAN,IAAyB,KAAKI,YAAlC,EAAgD;AAC9C,WAAKJ,eAAL,GAAuBL,aAAvB;AACA,WAAKS,YAAL,GAAoBP,mBAAA,CAAC,KAAKG,eAAN,MAAA,EAAuB,KAAKI,YAA5B,CAApB;AACD;;;AAGD,QAAMG,UAAU,GAAG,KAAKL,MAAL,CAAYM,aAAZ,CAA0B,QAA1B,CAAnB;AACAD,IAAAA,UAAU,CAACE,OAAX,CAAmB,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,MAAL,CAAY,KAAZ,CAAJ;AAAA,KAAvB;AACD;;;;SAEMC,cAAA;;;AACL,QAAMC,QAAQ,GAAe,EAA7B;AAEA,SAAKX,MAAL,CAAYM,aAAZ,CAA0B,WAA1B,EAAuCC,OAAvC,CAA+C,UAACC,IAAD;AAC7CG,MAAAA,QAAQ,CAACC,IAAT,CAAc;AACZ3B,QAAAA,SAAS,EAAEuB,IAAI,CAACvB,SADJ;AAEZ4B,QAAAA,IAAI,EAAEL,IAAI,CAACK,IAFC;AAGZnB,QAAAA,KAAK,EAAEN,QAAQ,CAAC,MAAD,EAAOoB,IAAI,CAACd,KAAZ;AAHH,OAAd;AAKD,KAND;AAQA,WAAOiB,QAAP;AACD;;SAUMG,QAAA;AACL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,OAAL,CAAaH,KAAb,EAAZ;AACD;;SAEMI,OAAA;AACL,WAAO,KAAKjC,SAAL,CAAeiC,IAAf,EAAP;AACD;;SAEMC,OAAA;AACL,WAAO,KAAKlC,SAAL,CAAekC,IAAf,EAAP;AACD;;SAEMC,OAAA,cAAKC,QAAL;AACL,WAAO,KAAKJ,OAAL,CAAaG,IAAb,CAAkBC,QAAlB,CAAP;AACD;;SAEMC,SAAA;AACL,WAAO,KAAKL,OAAL,CAAaK,MAAb,EAAP;AACD;;SAEYzC,yBAAMC;;6BACXD,KAAK,CAACC,EAAD;AACZ;;;;;SAEYyC,2BAAQzC;;mBAEnB;;6BADMD,KAAK,CAACC,EAAD;AACX,eAAKwC,MAAL;;AACD;;;;;SAEOE,eAAA,sBAAaH,QAAb;AACN,WAAO9B,QAAQ,CAAC8B,QAAD,CAAR,GAAqB,KAAKD,IAAL,CAAUC,QAAV,EAAoBI,KAApB,EAArB,GAAmDJ,QAA1D;AACD;;SAEMK,cAAA,qBAAYL,QAAZ,EAAkC/B,KAAlC;AACL,QAAML,SAAS,GAAG,KAAKuC,YAAL,CAAkBH,QAAlB,CAAlB;AACApC,IAAAA,SAAS,CAAC0C,QAAV,CAAmB,OAAnB;AACA1C,IAAAA,SAAS,CAAC0C,QAAV,CAAmB,QAAnB,EAA6B;AAAEC,MAAAA,MAAM,EAAE;AAAEtC,QAAAA,KAAK,EAALA;AAAF;AAAV,KAA7B;AACAL,IAAAA,SAAS,CAAC0C,QAAV,CAAmB,MAAnB;AACD;;SAEME,WAAA,kBAASR,QAAT,EAA+BS,OAA/B;QAA+BA;AAAAA,MAAAA,UAAU;;;AAC9C,QAAM7C,SAAS,GAAG,KAAKuC,YAAL,CAAkBH,QAAlB,CAAlB;AACApC,IAAAA,SAAS,CAAC0C,QAAV,CAAmB,QAAnB,EAA6B;AAAEC,MAAAA,MAAM,EAAE;AAAEE,QAAAA,OAAO,EAAPA;AAAF;AAAV,KAA7B;AACD;;SAEMC,QAAA,eAAMV,QAAN;AACL,QAAMpC,SAAS,GAAG,KAAKuC,YAAL,CAAkBH,QAAlB,CAAlB;AACApC,IAAAA,SAAS,CAAC0C,QAAV,CAAmB,OAAnB;AACD;;SAEYK,yBAAOX;QAAAA;AAAAA,MAAAA,WAAuB;;;;mBACvB;;AAAlB,UAAMpC,SAAS,GAAG,OAAKuC,YAAL,CAAkBH,QAAlB,CAAlB;;AACApC,MAAAA,SAAS,CAAC0C,QAAV,CAAmB,QAAnB;6BACM,OAAKJ,OAAL;AACP;;;;;SAEYpB,uBAAM8B;QAAAA;AAAAA,MAAAA,YAAiC;;;;;;AAclD,cAAM/B,YAAY,GAAG,OAAKA,YAAL,IAAqBP,mBAAA,CAAC,OAAKG,eAAN,oBAA0B,OAAKJ,MAA/B,CAA1C;;AAEA,cAAMwC,WAAW,GAAG,OAAKxB,WAAL,GAAmByB,MAAnB,CAA+B,UAACC,IAAD,EAAOnB,OAAP;AACjD,gBAAMoB,eAAe,GAAGpB,OAAO,CAACqB,cAAR,KAA2B,KAA3B,IAAoCF,IAA5D;;AACA,gBAAInB,OAAO,CAACvB,KAAZ,EAAmB;AACjB,qBAAOC,mBAAA,CAACsB,OAAO,CAAChC,SAAT,oBAAuBgC,OAAO,CAACvB,MAA/B,EAAuC2C,eAAvC,CAAP;AACD;;AACD,mBAAOD,IAAP;AACD,WANmB,EAMjBlC,YANiB,CAApB;;iCAQqB,OAAKF,MAAL,CAAYuC,MAAZ,CAAmBpC,KAAnB,CAAyB+B,WAAzB;AAArB,mBAAKjB,OAAL;;;kBAEIgB,SAAS,CAACO,KAAV,KAAoB;;AAKtB;yCACMhE,aAAa;2CACb,OAAK+C,OAAL;;;;;sBANF,OAAKrC;2CACD,OAAKA,QAAL,CAAcuD,iBAAd;;;;;;;;;AAQV;;;;;;cA1BI,OAAKrC;mCACD,OAAKA,aAAL;;;;AAFR;;;;mBALmB;;AAAnB,UAAMC,UAAU,GAAG,OAAKL,MAAL,CAAYM,aAAZ,CAA0B,eAA1B,CAAnB;;0BACmBD,sBAARG,MAAoB;AAAA,+BACvBA,IAAI,CAACJ,aAAL,SAAyB6B,SAAzB,CADuB;AAE9B;;;AA8BF;;;;;;;;AArGC,aAAOjD,WAAW,CAAC,KAAKC,SAAN,CAAlB;AACD;;;;AAGC,aAAO,KAAKgC,OAAL,CAAaG,IAAb,CAAkB,KAAKtB,eAAvB,CAAP;AACD;;;;;;ACpFH;;;IAGM4C;AAKJ,8BAAmBC,SAAnB;AAHO,cAAA,GAAkC,EAAlC;AAIL,SAAK9C,MAAL,GAAc8C,SAAd;AACAA,IAAAA,SAAS,CAAC1C,aAAV,GAA0B,IAA1B;AACD;;;;SAEM2C,YAAA,mBAAUL,MAAV,EAAuBvC,MAAvB;;;AACL,SAAKuC,MAAL,GAAcA,MAAd;;AAEA,QAAIvC,MAAM,CAAC6C,KAAX,EAAkB;AAChB7C,MAAAA,MAAM,CAAC6C,KAAP,CAAatC,OAAb,CAAqB,UAACC,IAAD;AACnB,QAAA,KAAI,CAACsC,YAAL,CAAkBtC,IAAlB;AACD,OAFD;AAGD;;AAED,WAAO,KAAKX,MAAZ;AACD;AAED;;;;;;;;;;;;;;;SAcOiD,eAAA,sBAAatC,IAAb;AACL,QAAI,CAACA,IAAI,CAACK,IAAV,EAAgB;AACd,YAAM,IAAIkC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,QAAI,KAAKF,KAAL,CAAWrC,IAAI,CAACK,IAAhB,CAAJ,EAA2B;AACzB,YAAM,IAAIkC,KAAJ,6CAAmDvC,IAAI,CAACK,IAAxD,uBAAN;AACD;;;AAID,SAAKgC,KAAL,CAAWrC,IAAI,CAACK,IAAhB,IAAwBL,IAAxB;AACD;;SAEMF,gBAAA,uBAAc0C,QAAd;AACL,QAAMH,KAAK,GAAY,EAAvB;AAEAI,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKL,KAAnB,EAA0BtC,OAA1B,CAAkC,UAAAC,IAAI;AACpC,UAAI2C,KAAK,GAAG,IAAZ;;AACA,UAAIH,QAAQ,IAAI,CAACxC,IAAI,CAACwC,QAAD,CAArB,EAAiC;AAC/BG,QAAAA,KAAK,GAAG,KAAR;AACD;;AAED,UAAIA,KAAJ,EAAW;AACTN,QAAAA,KAAK,CAACjC,IAAN,CAAWJ,IAAX;AACD;AACF,KATD;AAWA,WAAOqC,KAAP;AACD;;;;;IClEGO,YAAY,gBAAG,IAAIV,kBAAJ,CAAuB7C,MAAvB,CAArB;;;;"}